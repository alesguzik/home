;; -*- coding: utf-8-unix -*-
;; History for SLIME REPL. Automatically written.
;; Edit only if you know what you're doing
("(quit)" "(quit (unix-status 0))" "(quit 0)" "exit" "(EXIT)" "(exit 0)" "(* 8 9)" "(set (cdr *test*) *test*)" "(setq (cdr *test*) *test*)" "(setq *test* (cons 1 nil))" "(setq *test* (lambda (x y) (+ x y)))" "(eval (list '*test* 1 2))" "(eval ('*test* 1 2))" "(eval (list '(lambda (x y) (+ x y)) 1 2))" "(eval '((lambda (x y) (+ x y)) 1 2))" "(eval ((lambda (x y) (+ x y)) 1 2))" "(apply *test* (list 1 2))" "(eval (list *test* 1 2))" "(eval '(*test* 1 2))" "(eval (*test* 1 2))" "*test*" "y-or-n-p" "y" "(y-or-n-p)" "(macroexpand '(car (cons 1 2)))" "(macroexpand '(first (cons 1 2)))" "(rest (cons 2 3))" "(rest *test*)" "(first *rest*)" "(first *test*)" "(setq *test* (list 1 2 3))" "(defvar *test*)" "(list 1 2 3)" "(macroexpand '(list 1 2 3))" "(macroexpand (list 1 2 3))" "'(1 2 3)" "(cdr (cons 2 3))" "(cdr (cons 1 nil))" "(cons 1 nil)" "(cons 1 2)" "'B" "(case 3 (1 :true) (2 :false))" "(case 2 (1 :true) (2 :false))" "(case 1 (1 :true) (2 :false))")
(in-package :clfswm)

;; fix
(defun update-layout-managed-children-keep-position (child parent)
  (let ((managed-children (frame-data-slot parent :layout-managed-children))
        (managed-in-parent (get-managed-child parent)))
    (dolist (ch managed-in-parent)
      (unless (child-member ch managed-children)
	(setf managed-children (append managed-children (list ch)))))
    (setf managed-children (remove-if-not (lambda (x)
					    (child-member x managed-in-parent))
					  managed-children))
    (setf (frame-data-slot parent :layout-managed-children) managed-children)
    managed-children))


(defmethod tile-layout (child parent)
  (let* ((managed-children (update-layout-managed-children child parent))
	 (pos (child-position child managed-children))
	 (len (length managed-children))
	 (d1 (ceiling (sqrt len)))
	 (d2  (ceiling (/ len d1)))
	 (nx (if (> (frame-rw parent) (frame-rh parent)) d1 d2))
	 (ny (if (> (frame-rw parent) (frame-rh parent)) d2 d1))
	 (dx (/ (frame-rw parent) nx))
	 (dy (/ (frame-rh parent) ny))
	 (dpos (- (* nx ny) len))
	 (width dx))
    (when (plusp dpos)
      (if (zerop pos)
	  (setf width (* dx (1+ dpos)))
	  (incf pos dpos)))
    (values (round (adj-border-xy (+ (frame-rx parent) (truncate (* (mod pos nx) dx))) child))
	    (round (adj-border-xy (+ (frame-ry parent) (truncate (* (truncate (/ pos nx)) dy))) child))
	    (round (adj-border-wh width child))
	    (round (adj-border-wh dy child)))))

;;; Redefine Space layout
(defun tile-space-layout (child parent)
  "Tile Space: tile child in its frame leaving spaces between them"
  (with-slots (rx ry rw rh) parent
    (let* ((managed-children (update-layout-managed-children child parent))
           (pos (child-position child managed-children))
           (len (length managed-children))
           (d1 (ceiling (sqrt len)))
           (d2 (ceiling (/ len d1)))
           (cols (if (> rw rh) d1 d2))
           (rows (if (> rw rh) d2 d1))
           (col (mod pos cols))
           (row (floor pos cols))
           (space-percent (or (frame-data-slot parent :tile-space-size) 0.05))
           (col-space-total (* rw space-percent))
           (row-space-total (* rh space-percent))
           (col-space (floor col-space-total (1+ cols)))
           (row-space (floor row-space-total (1+ rows)))
           (child-width (floor (- rw col-space-total) cols))
           (child-height (floor (- rh row-space-total) rows))
           )
      (values (round (print (adj-border-xy (+ rx col-space (* (+ col-space child-width) col)) child)))
              (round (print (adj-border-xy (+ ry row-space (* (+ row-space child-height) row)) child)))
	      (round (print (adj-border-wh child-width child)))
	      (round (print (adj-border-wh child-height child)))))))

(defun eval-in-frame (frame fun &optional (at 0) till)
  (let ((old-current-child *current-child*))
    (add-timer at
               (lambda ()
                 (setf *current-child* frame)
                 (show-all-children)
                 (funcall fun)
                 ))
    (when till
      (add-timer till
                 (lambda ()
                   (setf *current-child* old-current-child))))
  (values)))

(defun shell-in-frame (frame cmd &optional (at 0) till)
  (eval-in-frame frame (lambda () (do-shell cmd)) at till))

(defun execute-in-frame (frame cmd args &optional (at 0) till)
  (eval-in-frame frame (lambda () (do-execute cmd args)) at till))

(defun my-init-hook ()
  (dbg 'my-init-hook)
  (setf (frame-layout *root-frame*) #'tile-space-layout
        (frame-data-slot *root-frame* :tile-space-size) 0.05
        (frame-data-slot *root-frame* :tile-layout-keep-position) :yes)
  (let* (
         (communications-frame (add-frame
                                (create-frame
                                 :name "Communications"
                                 :layout #'tile-layout
                                 :data (list '(:tile-layout-keep-position :yes)))
                                *root-frame*))
         (im-frame (add-frame (create-frame :name "IM"
                                            :layout #'main-window-left-layout
                                            :data (list '(:tile-size 0.2)))
                              communications-frame))
         (mail-frame (add-frame (create-frame :name "Mail"
                                              :layout #'maximize-layout)
                                communications-frame))
         (work-frame (add-frame (create-frame
                                 :name "Work"
                                 :layout #'tile-space-layout
                                 :data (list '(:tile-layout-keep-position :yes)
                                             '(:tile-space-size 0.05)))
                                *root-frame*))
         (learn-frame (add-frame (create-frame
                                  :name "Learn"
                                  :layout #'maximize-layout)
                                 work-frame))
         (code-frame (add-frame (create-frame
                                 :name "Code"
                                 :layout #'main-window-left-layout
                                 :data (list '(:tile-size 0.2)))
                                work-frame))
         )
    (shell-in-frame learn-frame "firefox" 1)
    (shell-in-frame mail-frame "claws-mail" 12)
    (shell-in-frame im-frame "pidgin" 15)
    (shell-in-frame im-frame "skype" 15)
    (shell-in-frame code-frame "emacs" 30)))

(setf *init-hook* '(my-init-hook))
;;; ### Internal variables definitions                    ### ;;;
;;; ### You can edit this part when clfswm is not running ### ;;;
;;; ### And you can remove this part to revert to the     ### ;;;
;;; ### original configuration variables values.          ### ;;;
(in-package :clfswm)

(setf
  ;; Gimp Layout Group:

  ;; Notify Window Group:

  ;; Menu Group:

  ;; Expose Mode Group:

  ;; Circulate Mode Group:

  ;; Info Mode Group:

  ;; Query String Group:

  ;; Identify Key Group:

  ;; Second Mode Group:

  ;; Frame Colors Group:

  ;; Corner Group:

  ;; Placement Group:

  ;; Hook Group:
  *INIT-HOOK* (quote (CLFSWM::MY-INIT-HOOK))
  *BINDING-HOOK* (quote (CLFSWM::SET-DEFAULT-CIRCULATE-KEYS CLFSWM::SET-DEFAULT-EXPOSE-KEYS
                                           CLFSWM::INIT-*INFO-KEYS*
                                           CLFSWM::INIT-*INFO-MOUSE*
                                           CLFSWM::SET-DEFAULT-INFO-KEYS
                                           CLFSWM::SET-DEFAULT-INFO-MOUSE
                                           CLFSWM::INIT-*QUERY-KEYS*
                                           CLFSWM::SET-DEFAULT-QUERY-KEYS
                                           CLFSWM::INIT-*MAIN-KEYS*
                                           CLFSWM::INIT-*MAIN-MOUSE*
                                           CLFSWM::SET-DEFAULT-MAIN-KEYS
                                           CLFSWM::SET-DEFAULT-MAIN-MOUSE
                                           CLFSWM::INIT-*SECOND-KEYS*
                                           CLFSWM::INIT-*SECOND-MOUSE*
                                           CLFSWM::SET-DEFAULT-SECOND-KEYS
                                           CLFSWM::SET-DEFAULT-SECOND-MOUSE))

  ;; Main Mode Group:
  *COLOR-MAYBE-SELECTED* "Light Sky Blue"
  *COLOR-UNSELECTED* "White"

  ;; Miscellaneous Group:

)
;;; ### End of internal variables definitions ### ;;;

(in-package :clfswm)

;;; Redefine Space layout
(defun tile-space-layout (child parent)
  "Tile Space: tile child in its frame leaving spaces between them"
  (with-slots (rx ry rw rh) parent
    (let* ((managed-children (update-layout-managed-children child parent))
	   (pos (child-position child managed-children))
	   (len (length managed-children))
	   (cols (ceiling (sqrt len)))
           (rows (ceiling (/ len cols)))
           (col (mod pos cols))
           (row (floor pos cols))
	   (space-percent (or (frame-data-slot parent :tile-space-size) 0.05))
           (col-space-total (* rw space-percent))
           (row-space-total (* rh space-percent))
           (col-space (floor col-space-total (1+ cols)))
           (row-space (floor row-space-total (1+ rows)))
           (child-width (floor (- rw col-space-total) cols))
           (child-height (floor (- rh row-space-total) rows))
           )
      (values (round (print (adj-border-xy (+ rx col-space (* (+ col-space child-width) col)) child)))
              (round (print (adj-border-xy (+ ry row-space (* (+ row-space child-height) row)) child)))
	      (round (print (adj-border-wh child-width child)))
	      (round (print (adj-border-wh child-height child)))))))


(defmacro frame-tree (params &rest children)
  `(let ((frame (create-frame ,@params)))
    (dolist (child (list ,@children))
      (add-frame child frame))
    frame))

(defun run-in-frame (frame cmd &optional (delay 0))
  (let ((old-current-child *current-child*))
    (setf *current-child* frame)
    (if (listp cmd)
        (dolist (c cmd)
          (do-shell c))
        (do-shell cmd))
    ;; (sleep delay)
    (setf *current-child* old-current-child))
  frame)

(defun my-init-hook ()
  (dbg 'my-init-hook)
  (setf (frame-layout *root-frame*) #'tile-space-layout
        (frame-data-slot *root-frame* :tile-space-size) 0.05
        (frame-data-slot *root-frame* :tile-layout-keep-position) :yes)
  (let* ((skype-frame (create-frame :name "Skype"
                                    :layout #'main-window-left-layout
                                    :data (list '(:tile-size 0.2))))
         (im-frame (create-frame :name "IM"
                                 :layout #'main-window-left-layout
                                 :data (list '(:tile-size 0.2))))
         (mail-frame (create-frame :name "Mail"
                                   :layout #'maximize-layout))
         (communications-frame
          (create-frame :name "Communications"
                        :layout #'maximize-layout
                        :child (list
                                (create-frame
                                 :name "Communications:inner"
                                 :layout #'tile-horizontal-layout
                                 :data (list '(:tile-layout-keep-position :yes))
                                 :child (list skype-frame im-frame mail-frame)))))
         (distractors-frame (create-frame
                             :name "Distractors"
                             :layout #'tile-horizontal-layout
                             :data (list '(:tile-layout-keep-position :yes))))
         (work-frame (create-frame
                             :name "Work"
                             :layout #'tile-horizontal-layout
                             :data (list '(:tile-layout-keep-position :yes))))
         (utility-frame (create-frame
                             :name "Utility"
                             :layout #'tile-space-layout
                             :data (list '(:tile-layout-keep-position :yes)
                                         '(:tile-space-size 0.05)))))
    (add-frame utility-frame *root-frame*)
    (add-frame work-frame *root-frame*)
    (add-frame distractors-frame *root-frame*)
    (add-frame communications-frame *root-frame*)
    )
  (setf *current-child* (first (frame-child *current-root*))))

;; (setf *init-hook* '(my-init-hook))

;; (do-shell "exec apwal")

;; (my-frame (:name "Communications" :layout #'tile-left-layout :data (list '(:tile-size 0.6)))


(in-package :clfswm)

;;; Redefine Space layout
(defun tile-space-layout (child parent)
  "Tile Space: tile child in its frame leaving spaces between them"
  (with-slots (rx ry rw rh) parent
    (let* ((managed-children (update-layout-managed-children child parent))
	   (pos (child-position child managed-children))
	   (len (length managed-children))
	   (cols (ceiling (sqrt len)))
           (rows (ceiling (/ len cols)))
           (col (mod pos cols))
           (row (floor pos cols))
	   (space-percent (or (frame-data-slot parent :tile-space-size) 0.05))
           (col-space-total (* rw space-percent))
           (row-space-total (* rh space-percent))
           (col-space (floor col-space-total (1+ cols)))
           (row-space (floor row-space-total (1+ rows)))
           (child-width (floor (- rw col-space-total) cols))
           (child-height (floor (- rh row-space-total) rows))
           )
      (values (round (print (adj-border-xy (+ rx col-space (* (+ col-space child-width) col)) child)))
              (round (print (adj-border-xy (+ ry row-space (* (+ row-space child-height) row)) child)))
	      (round (print (adj-border-wh child-width child)))
	      (round (print (adj-border-wh child-height child)))))))

;; (defun my-init-hook ()
;;   (dbg 'my-init-hook)
;;   (setf (frame-data-slot *root-frame* :tile-space-size) 0.05)
;;   (setf (frame-layout *root-frame*) #'tile-space-layout))
;;   (add-frame (create-frame :name "Communications" :layout #'tile-left-layout :data (list '(:tile-size 0.6))) *root-frame*)
;;   (add-frame (create-frame :name "Default" :layout #'tile-left-layout :data (list '(:tile-size 0.6))) *root-frame*)
;;   (add-frame (create-frame :name "The Gimp" :x 0.6 :y 0 :w 0.3 :h 0.2) *root-frame*)
;;   (add-frame (create-frame :name "Net" :x 0.52 :y 0.3 :w 0.4 :h 0.3) *root-frame*)
;;   (add-frame (create-frame :x 0.4 :y 0 :w 0.2 :h 0.3) (first (frame-child *root-frame*)))
;;   (add-frame (create-frame :x 0.6 :y 0.4 :w 0.4 :h 0.2) (first (frame-child *root-frame*)))
;;   (add-frame (create-frame :x 0.4 :y 0.7 :w 0.2 :h 0.3) (first (frame-child *root-frame*)))
;;   (let ((frame (create-frame :name "The Qiv" :x 0 :y 0.4 :w 0.4 :h 0.2)))
;;     (add-frame frame (first (frame-child *root-frame*)))
;;     (add-frame (create-frame) frame))
;;   (add-frame (create-frame :x 0.1 :y 0.55 :w 0.8 :h 0.43) *root-frame*)
;;   (add-frame (create-frame :x 0.2 :y 0.1 :w 0.6 :h 0.4) (first (frame-child *root-frame*)))
;;   (add-frame (create-frame :x 0.3 :y 0.55 :w 0.4 :h 0.3) (first (frame-child *root-frame*)))
;;   (add-frame (create-frame :x 0.1 :y 0.1 :w 0.3 :h 0.6) (first (frame-child (first (frame-child *root-frame*)))))
;;   (setf *current-child* (first (frame-child *current-root*)))
;;   (setf (frame-layout *current-child*) #'tile-layout))

;; (setf *init-hook* '(my-init-hook))

;; (do-shell "exec apwal")

;; (defun my-frame (params )

;; (my-frame (:name "Communications" :layout #'tile-left-layout :data (list '(:tile-size 0.6)))

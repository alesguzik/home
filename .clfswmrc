(in-package :clfswm)

(defun update-layout-managed-children-keep-position (child parent)
  (let ((managed-children (frame-data-slot parent :layout-managed-children))
        (managed-in-parent (get-managed-child parent)))
    (dolist (ch managed-in-parent)
      (unless (child-member ch managed-children)
	(setf managed-children (append managed-children (list ch)))))
    (setf managed-children (remove-if-not (lambda (x)
					    (child-member x managed-in-parent))
					  managed-children))
    (setf (frame-data-slot parent :layout-managed-children) managed-children)
    managed-children))

;;; Redefine Space layout
(defun tile-space-layout (child parent)
  "Tile Space: tile child in its frame leaving spaces between them"
  (with-slots (rx ry rw rh) parent
    (let* ((managed-children (update-layout-managed-children child parent))
	   (pos (child-position child managed-children))
	   (len (length managed-children))
	   (cols (ceiling (sqrt len)))
           (rows (ceiling (/ len cols)))
           (col (mod pos cols))
           (row (floor pos cols))
	   (space-percent (or (frame-data-slot parent :tile-space-size) 0.05))
           (col-space-total (* rw space-percent))
           (row-space-total (* rh space-percent))
           (col-space (floor col-space-total (1+ cols)))
           (row-space (floor row-space-total (1+ rows)))
           (child-width (floor (- rw col-space-total) cols))
           (child-height (floor (- rh row-space-total) rows))
           )
      (values (round (print (adj-border-xy (+ rx col-space (* (+ col-space child-width) col)) child)))
              (round (print (adj-border-xy (+ ry row-space (* (+ row-space child-height) row)) child)))
	      (round (print (adj-border-wh child-width child)))
	      (round (print (adj-border-wh child-height child)))))))

(defun eval-in-frame (frame fun &optional (at 0) till)
  (let ((old-current-child *current-child*))
    (add-timer at
               (lambda ()
                 (setf *current-child* frame)
                 (show-all-children)
                 (funcall fun)
                 ))
    (when till
      (add-timer till
                 (lambda ()
                   (setf *current-child* old-current-child))))
  (values)))

(defun shell-in-frame (frame cmd &optional (at 0) till)
  (eval-in-frame frame (lambda () (do-shell cmd)) at till))

(defun execute-in-frame (frame cmd args &optional (at 0) till)
  (eval-in-frame frame (lambda () (do-execute cmd args)) at till))

(defun my-init-hook ()
  (dbg 'my-init-hook)
  (setf (frame-layout *root-frame*) #'tile-space-layout
        (frame-data-slot *root-frame* :tile-space-size) 0.05
        (frame-data-slot *root-frame* :tile-layout-keep-position) :yes)
  (let* (
         ;; (distractors-frame (add-frame (create-frame
         ;;                                :name "Distractors"
         ;;                                :layout #'tile-horizontal-layout
         ;;                                :data (list '(:tile-layout-keep-position :yes)))
         ;;                               *root-frame*))
         ;; (utility-frame (add-frame (create-frame
         ;;                            :name "Utility"
         ;;                            :layout #'tile-space-layout
         ;;                            :data (list '(:tile-layout-keep-position :yes)
         ;;                                        '(:tile-space-size 0.05)))
         ;;                           *root-frame*))
         (communications-frame (add-frame
                                (create-frame
                                 :name "Communications"
                                 :layout #'tile-horizontal-layout
                                 :data (list '(:tile-layout-keep-position :yes)))
                                      *root-frame*))
         (skype-frame (add-frame (create-frame :name "Skype"
                                               :layout #'main-window-left-layout
                                               :data (list '(:tile-size 0.2)))
                                 communications-frame))
         (im-frame (add-frame (create-frame :name "IM"
                                            :layout #'main-window-left-layout
                                            :data (list '(:tile-size 0.2)))
                              communications-frame))
         (mail-frame (add-frame (create-frame :name "Mail"
                                              :layout #'maximize-layout)
                                communications-frame))
         (work-frame (add-frame (create-frame
                                 :name "Work"
                                 :layout #'tile-space-layout
                                 :data (list '(:tile-layout-keep-position :yes)
                                             '(:tile-space-size 0.05)))
                                *root-frame*))
         (learn-frame (add-frame (create-frame
                                  :name "Learn"
                                  :layout #'maximize-layout)
                                 work-frame))
         (code-frame (add-frame (create-frame
                                 :name "Code"
                                 :layout #'main-window-left-layout
                                 :data (list '(:tile-size 0.2)))
                                work-frame))
         )
    (shell-in-frame learn-frame "firefox" 1)
    (shell-in-frame mail-frame "claws-mail" 10)
    (shell-in-frame im-frame "pidgin" 15)
    (shell-in-frame skype-frame "skype" 20)
    (shell-in-frame code-frame "emacs" 30)
    
    ;; (at 15
    ;;   (lambda ()
    ;;     (setf *current-child* distractors-frame)
    ;;     (show-all-children)))
    ))

(setf *init-hook* '(my-init-hook))

;; (do-shell "exec apwal")

;; (my-frame (:name "Communications" :layout #'tile-left-layout :data (list '(:tile-size 0.6)))

